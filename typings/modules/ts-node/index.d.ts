// Generated by typings
// Source: node_modules/make-error/index.d.ts
declare module '~ts-node~make-error/index' {
/**
 * Create a new error constructor instance.
 */
function makeError(name: string): makeError.Constructor<makeError.BaseError>;

/**
 * Set the constructor prototype to `BaseError`.
 */
function makeError<T extends Error>(super_: { new (...args: any[]): T }): makeError.Constructor<T & makeError.BaseError>;

/**
 * Create a specialized error instance.
 */
function makeError<T extends Error>(name: string | Function, super_: { new (...args: any[]): T }): makeError.Constructor<T>;

module makeError {
  /**
   * Use with ES2015+ inheritance.
   */
  export class BaseError implements Error {
    message: string;
    name: string;
    stack: string;

    constructor(message?: string);
  }

  export interface Constructor <T> {
    new (message?: string): T
    super_: any
    prototype: T
  }
}

export = makeError;
}

// Generated by typings
// Source: node_modules/ts-node/dist/index.d.ts
declare module 'ts-node' {
import { BaseError } from '~ts-node~make-error/index';
import * as TS from 'typescript';
export interface TSCommon {
    version: typeof TS.version;
    sys: typeof TS.sys;
    ScriptSnapshot: typeof TS.ScriptSnapshot;
    displayPartsToString: typeof TS.displayPartsToString;
    createLanguageService: typeof TS.createLanguageService;
    getDefaultLibFilePath: typeof TS.getDefaultLibFilePath;
    getPreEmitDiagnostics: typeof TS.getPreEmitDiagnostics;
    flattenDiagnosticMessageText: typeof TS.flattenDiagnosticMessageText;
    transpileModule: typeof TS.transpileModule;
    ModuleKind: typeof TS.ModuleKind;
    ScriptTarget: typeof TS.ScriptTarget;
    findConfigFile: typeof TS.findConfigFile;
    readConfigFile: typeof TS.readConfigFile;
    parseJsonConfigFileContent: typeof TS.parseJsonConfigFileContent;
    parseConfigFile?(json: any, host: any, basePath: string): any;
}
export const VERSION: any;
export interface Options {
    fast?: boolean | null;
    cache?: boolean | null;
    cacheDirectory?: string;
    compiler?: string;
    project?: boolean | string;
    ignore?: boolean | string | string[];
    ignoreWarnings?: number | string | Array<number | string>;
    disableWarnings?: boolean | null;
    getFile?: (fileName: string) => string;
    fileExists?: (fileName: string) => boolean;
    compilerOptions?: any;
}
export interface TypeInfo {
    name: string;
    comment: string;
}
export function split(value: string | undefined): string[] | undefined;
export function parse(value: string | undefined): any;
export function normalizeSlashes(value: string): string;
export interface Register {
    cwd: string;
    extensions: string[];
    compile(code: string, fileName: string, lineOffset?: number): string;
    getTypeInfo(fileName: string, position: number): TypeInfo;
}
export function register(options?: Options): Register;
export function fileExists(fileName: string): boolean;
export function getDirectories(path: string): string[];
export function directoryExists(path: string): boolean;
export function getFile(fileName: string): string;
export function formatDiagnostics(diagnostics: TS.Diagnostic[], cwd: string, ts: TSCommon, lineOffset: number): TSDiagnostic[];
export interface TSDiagnostic {
    message: string;
    code: number;
}
export function formatDiagnostic(diagnostic: TS.Diagnostic, cwd: string, ts: TSCommon, lineOffset: number): TSDiagnostic;
export class TSError extends BaseError {
    diagnostics: TSDiagnostic[];
    name: string;
    constructor(diagnostics: TSDiagnostic[]);
}
}
